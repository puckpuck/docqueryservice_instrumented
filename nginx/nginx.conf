load_module modules/ngx_otel_module.so;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    # OpenTelemetry configuration
    otel_service_name "docquery-nginx";
    otel_exporter {
        endpoint "http://otel-collector:4317";
    }

    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'trace_id=$opentelemetry_trace_id '
                    'span_id=$opentelemetry_span_id';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

    # Frontend server
    server {
        listen 80;
        server_name localhost;

        location / {
            proxy_pass http://frontend:80;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # OpenTelemetry context propagation
            proxy_set_header traceparent $opentelemetry_context_traceparent;
            proxy_set_header tracestate $opentelemetry_context_tracestate;
        }
    }

    # Backend servers
    server {
        listen 8080;
        server_name localhost;

        # Python backend
        location /v1/python/ {
            proxy_pass http://python-backend:8080/v1/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # OpenTelemetry context propagation
            proxy_set_header traceparent $opentelemetry_context_traceparent;
            proxy_set_header tracestate $opentelemetry_context_tracestate;
        }

        # .NET backend
        location /v1/dotnet/ {
            proxy_pass http://dotnet-backend:80/v1/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # OpenTelemetry context propagation
            proxy_set_header traceparent $opentelemetry_context_traceparent;
            proxy_set_header tracestate $opentelemetry_context_tracestate;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
        }
    }
}

