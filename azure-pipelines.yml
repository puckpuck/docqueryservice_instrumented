trigger:
  - main

variables:
  azureSubscription: 'Azure-DocQuery'
  resourceGroup: 'rg-docquery-$(environment)'
  webAppName: 'app-docquery-backend-$(environment)'
  environment: '$(environment)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      displayName: Build .NET Backend
      inputs:
        command: 'build'
        projects: '**/DocQuery.Api.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration Release'

    - task: DotNetCoreCLI@2
      displayName: Publish .NET Backend
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environment)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/drop/**/*.zip'
              appSettings: |
                -ASPNETCORE_ENVIRONMENT $(environment)
                -OTEL_EXPORTER_OTLP_ENDPOINT $(otelCollectorEndpoint)
                -OTEL_SERVICE_NAME docquery-backend-dotnet

          - task: AzureAppServiceSettings@1
            displayName: 'Update App Settings'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              resourceGroupName: $(resourceGroup)
              connectionStrings: |
                [
                  {
                    "name": "DefaultConnection",
                    "value": "$(dbConnectionString)",
                    "type": "PostgreSQL"
                  }
                ]

