{"created": 1758582749.1249988, "duration": 0.30829572677612305, "exitcode": 1, "root": "/Users/yoz/localcode/docqueryservice_instrumented/tests", "environment": {}, "summary": {"passed": 21, "failed": 1, "skipped": 1, "total": 23, "collected": 23}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test_openapi_contract.py", "type": "Module"}]}, {"nodeid": "test_openapi_contract.py::TestOpenAPISpecValidity", "outcome": "passed", "result": [{"nodeid": "test_openapi_contract.py::TestOpenAPISpecValidity::test_spec_is_valid_yaml", "type": "Function", "lineno": 184}, {"nodeid": "test_openapi_contract.py::TestOpenAPISpecValidity::test_spec_can_be_parsed", "type": "Function", "lineno": 192}]}, {"nodeid": "test_openapi_contract.py::TestAPIEndpointsFromSpec", "outcome": "passed", "result": [{"nodeid": "test_openapi_contract.py::TestAPIEndpointsFromSpec::test_all_paths_are_accessible", "type": "Function", "lineno": 200}]}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec", "outcome": "passed", "result": [{"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_endpoint_exists", "type": "Function", "lineno": 221}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_response_schema_compliance", "type": "Function", "lineno": 229}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[format]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[qterm]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[fl]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[rows]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[os]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[count_exact]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[lang_exact]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[strdate]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[enddate]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[facet]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[facet.field]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[sort]", "type": "Function", "lineno": 239}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_required_parameters", "type": "Function", "lineno": 276}]}, {"nodeid": "test_openapi_contract.py::TestParametersFromSpec", "outcome": "passed", "result": [{"nodeid": "test_openapi_contract.py::TestParametersFromSpec::test_format_parameter", "type": "Function", "lineno": 323}, {"nodeid": "test_openapi_contract.py::TestParametersFromSpec::test_rows_parameter", "type": "Function", "lineno": 344}, {"nodeid": "test_openapi_contract.py::TestParametersFromSpec::test_pagination_parameters", "type": "Function", "lineno": 370}]}, {"nodeid": "test_openapi_contract.py::TestHealthEndpointFromSpec", "outcome": "passed", "result": [{"nodeid": "test_openapi_contract.py::TestHealthEndpointFromSpec::test_health_endpoint_if_defined", "type": "Function", "lineno": 392}]}, {"nodeid": "test_openapi_contract.py::TestSpecSchemaCompliance", "outcome": "passed", "result": [{"nodeid": "test_openapi_contract.py::TestSpecSchemaCompliance::test_error_response_schema", "type": "Function", "lineno": 420}]}, {"nodeid": "test_openapi_contract.py", "outcome": "passed", "result": [{"nodeid": "test_openapi_contract.py::TestOpenAPISpecValidity", "type": "Class"}, {"nodeid": "test_openapi_contract.py::TestAPIEndpointsFromSpec", "type": "Class"}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec", "type": "Class"}, {"nodeid": "test_openapi_contract.py::TestParametersFromSpec", "type": "Class"}, {"nodeid": "test_openapi_contract.py::TestHealthEndpointFromSpec", "type": "Class"}, {"nodeid": "test_openapi_contract.py::TestSpecSchemaCompliance", "type": "Class"}]}], "tests": [{"nodeid": "test_openapi_contract.py::TestOpenAPISpecValidity::test_spec_is_valid_yaml", "lineno": 184, "outcome": "passed", "keywords": ["test_spec_is_valid_yaml", "TestOpenAPISpecValidity", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.0001675839999999984, "outcome": "passed"}, "call": {"duration": 0.016615624999999995, "outcome": "passed"}, "teardown": {"duration": 7.079200000001395e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestOpenAPISpecValidity::test_spec_can_be_parsed", "lineno": 192, "outcome": "passed", "keywords": ["test_spec_can_be_parsed", "TestOpenAPISpecValidity", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.067224583, "outcome": "passed"}, "call": {"duration": 9.741699999998854e-05, "outcome": "passed"}, "teardown": {"duration": 6.404199999998639e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestAPIEndpointsFromSpec::test_all_paths_are_accessible", "lineno": 200, "outcome": "passed", "keywords": ["test_all_paths_are_accessible", "TestAPIEndpointsFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010050000000000336, "outcome": "passed"}, "call": {"duration": 0.006624083000000003, "outcome": "passed"}, "teardown": {"duration": 7.495899999998556e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_endpoint_exists", "lineno": 221, "outcome": "passed", "keywords": ["test_wds_endpoint_exists", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 8.054199999996126e-05, "outcome": "passed"}, "call": {"duration": 0.003269542000000014, "outcome": "passed"}, "teardown": {"duration": 6.262500000003834e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_response_schema_compliance", "lineno": 229, "outcome": "failed", "keywords": ["test_wds_response_schema_compliance", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 7.379100000004524e-05, "outcome": "passed"}, "call": {"duration": 0.004268292000000007, "outcome": "failed", "crash": {"path": "/Users/yoz/localcode/docqueryservice_instrumented/tests/test_openapi_contract.py", "lineno": 107, "message": "Failed: Response validation failed: None is not of type 'string'"}, "traceback": [{"path": "test_openapi_contract.py", "lineno": 238, "message": ""}, {"path": "test_openapi_contract.py", "lineno": 107, "message": "Failed"}], "longrepr": "self = <test_openapi_contract.OpenAPIContractTester object at 0x105629dc0>\nresponse_data = {'documents': {'D1558558': {'abstract': None, 'author': None, 'country': 'World', 'createdAt': '2025-09-22T22:44:55.49..., 'author': None, 'country': 'World', 'createdAt': '2025-09-22T22:46:32.02', ...}}, 'os': 0, 'page': 1, 'rows': 3, ...}\noperation = {'description': 'Search for World Bank documents with flexible filtering and pagination.\\nSupports full-text search, c...tion/json': {'schema': {'$ref': '#/components/schemas/ErrorResponse'}}}, 'description': 'Internal server error'}}, ...}\nstatus_code = 200, content_type = 'application/json'\n\n    def validate_response_schema(self, response_data: Any, operation: Dict[str, Any],\n                               status_code: int = 200, content_type: str = 'application/json'):\n        \"\"\"Validate response against OpenAPI schema\"\"\"\n        responses = operation.get('responses', {})\n        response_spec = responses.get(str(status_code), responses.get('default'))\n    \n        if not response_spec:\n            pytest.fail(f\"No response spec for status code {status_code}\")\n    \n        content = response_spec.get('content', {})\n        media_type = content.get(content_type)\n    \n        if not media_type:\n            # Try to find any JSON content type\n            for ct in content.keys():\n                if 'json' in ct.lower():\n                    media_type = content[ct]\n                    break\n    \n        if not media_type:\n            return  # No schema to validate against\n    \n        schema_ref = media_type.get('schema', {})\n        if '$ref' in schema_ref:\n            schema = self.get_schema(schema_ref['$ref'])\n        else:\n            schema = schema_ref\n    \n        if schema:\n            try:\n                # Convert OpenAPI 3.0 schema to JSON Schema Draft 7\n                json_schema = self._openapi_to_jsonschema(schema)\n    \n                # Filter out 'facets' from documents for real World Bank API validation\n                # since facets is not a document but is nested in the documents object\n                validation_data = response_data.copy()\n                if 'documents' in validation_data and isinstance(validation_data['documents'], dict):\n                    if 'facets' in validation_data['documents']:\n                        validation_data['documents'] = {k: v for k, v in validation_data['documents'].items() if k != 'facets'}\n    \n>               validate(instance=validation_data, schema=json_schema)\n\ntest_openapi_contract.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = {'documents': {'D1558558': {'abstract': None, 'author': None, 'country': 'World', 'createdAt': '2025-09-22T22:44:55.49..., 'author': None, 'country': 'World', 'createdAt': '2025-09-22T22:46:32.02', ...}}, 'os': 0, 'page': 1, 'rows': 3, ...}\nschema = {'$schema': 'http://json-schema.org/draft-07/schema#', 'properties': {'documents': {'$schema': 'http://json-schema.org...r', 'example': 1, 'type': 'integer'}, ...}, 'required': ['rows', 'os', 'page', 'total', 'documents'], 'type': 'object'}\ncls = <class 'jsonschema.validators.Draft7Validator'>, args = (), kwargs = {}\nvalidator = Draft7Validator(schema={'$schema': 'http://json-...ft-07/schema#', 'properties': {'documents': {'$schema': 'http://jso...e': 'integer'}, ...}, 'required': ['rows', 'os', 'page', 'total', 'documents'], 'type': 'object'}, format_checker=None)\nerror = <ValidationError: \"None is not of type 'string'\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n    \n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: None is not of type 'string'\nE           \nE           Failed validating 'type' in schema['properties']['documents']['additionalProperties']['properties']['abstract']:\nE               {'type': 'string',\nE                'description': 'Document abstract/summary',\nE                'example': 'This document analyzes renewable energy potential...',\nE                '$schema': 'http://json-schema.org/draft-07/schema#'}\nE           \nE           On instance['documents']['D33234291']['abstract']:\nE               None\n\n../../../Library/Python/3.9/lib/python/site-packages/jsonschema/validators.py:1332: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_openapi_contract.TestWdsEndpointFromSpec object at 0x105634880>\ncontract_tester = <test_openapi_contract.OpenAPIContractTester object at 0x105629dc0>\n\n    def test_wds_response_schema_compliance(self, contract_tester):\n        \"\"\"Test that /wds response matches OpenAPI schema\"\"\"\n        operation = contract_tester.get_operation('/wds', 'get')\n    \n        response = contract_tester.make_request('/wds', params={'rows': 3})\n        data = response.json()\n    \n        # Validate against schema defined in spec\n>       contract_tester.validate_response_schema(data, operation, response.status_code)\n\ntest_openapi_contract.py:238: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_openapi_contract.OpenAPIContractTester object at 0x105629dc0>\nresponse_data = {'documents': {'D1558558': {'abstract': None, 'author': None, 'country': 'World', 'createdAt': '2025-09-22T22:44:55.49..., 'author': None, 'country': 'World', 'createdAt': '2025-09-22T22:46:32.02', ...}}, 'os': 0, 'page': 1, 'rows': 3, ...}\noperation = {'description': 'Search for World Bank documents with flexible filtering and pagination.\\nSupports full-text search, c...tion/json': {'schema': {'$ref': '#/components/schemas/ErrorResponse'}}}, 'description': 'Internal server error'}}, ...}\nstatus_code = 200, content_type = 'application/json'\n\n    def validate_response_schema(self, response_data: Any, operation: Dict[str, Any],\n                               status_code: int = 200, content_type: str = 'application/json'):\n        \"\"\"Validate response against OpenAPI schema\"\"\"\n        responses = operation.get('responses', {})\n        response_spec = responses.get(str(status_code), responses.get('default'))\n    \n        if not response_spec:\n            pytest.fail(f\"No response spec for status code {status_code}\")\n    \n        content = response_spec.get('content', {})\n        media_type = content.get(content_type)\n    \n        if not media_type:\n            # Try to find any JSON content type\n            for ct in content.keys():\n                if 'json' in ct.lower():\n                    media_type = content[ct]\n                    break\n    \n        if not media_type:\n            return  # No schema to validate against\n    \n        schema_ref = media_type.get('schema', {})\n        if '$ref' in schema_ref:\n            schema = self.get_schema(schema_ref['$ref'])\n        else:\n            schema = schema_ref\n    \n        if schema:\n            try:\n                # Convert OpenAPI 3.0 schema to JSON Schema Draft 7\n                json_schema = self._openapi_to_jsonschema(schema)\n    \n                # Filter out 'facets' from documents for real World Bank API validation\n                # since facets is not a document but is nested in the documents object\n                validation_data = response_data.copy()\n                if 'documents' in validation_data and isinstance(validation_data['documents'], dict):\n                    if 'facets' in validation_data['documents']:\n                        validation_data['documents'] = {k: v for k, v in validation_data['documents'].items() if k != 'facets'}\n    \n                validate(instance=validation_data, schema=json_schema)\n            except ValidationError as e:\n>               pytest.fail(f\"Response validation failed: {e.message}\")\nE               Failed: Response validation failed: None is not of type 'string'\n\ntest_openapi_contract.py:107: Failed"}, "teardown": {"duration": 0.00011404199999998088, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[format]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[format]", "format", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00011762500000001008, "outcome": "passed"}, "call": {"duration": 0.0070497910000000275, "outcome": "passed"}, "teardown": {"duration": 8.475000000002231e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[qterm]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[qterm]", "qterm", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010066699999999873, "outcome": "passed"}, "call": {"duration": 0.0032130419999999993, "outcome": "passed"}, "teardown": {"duration": 6.816599999998063e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[fl]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[fl]", "fl", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 9.1208999999981e-05, "outcome": "passed"}, "call": {"duration": 0.003459458999999998, "outcome": "passed"}, "teardown": {"duration": 7.47499999999568e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[rows]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[rows]", "rows", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010012500000000646, "outcome": "passed"}, "call": {"duration": 0.0030100000000000127, "outcome": "passed"}, "teardown": {"duration": 6.47079999999689e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[os]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[os]", "os", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010712500000004122, "outcome": "passed"}, "call": {"duration": 0.0029984999999999595, "outcome": "passed"}, "teardown": {"duration": 8.008300000000856e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[count_exact]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[count_exact]", "count_exact", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010129199999997507, "outcome": "passed"}, "call": {"duration": 0.0030120000000000147, "outcome": "passed"}, "teardown": {"duration": 7.220800000001804e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[lang_exact]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[lang_exact]", "lang_exact", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 9.812500000000446e-05, "outcome": "passed"}, "call": {"duration": 0.0029492500000000144, "outcome": "passed"}, "teardown": {"duration": 7.02910000000001e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[strdate]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[strdate]", "strdate", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010183299999999562, "outcome": "passed"}, "call": {"duration": 0.002737791999999961, "outcome": "passed"}, "teardown": {"duration": 6.662499999998683e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[enddate]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[enddate]", "enddate", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010287500000000227, "outcome": "passed"}, "call": {"duration": 0.0029364170000000245, "outcome": "passed"}, "teardown": {"duration": 7.67499999999588e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[facet]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[facet]", "facet", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010170800000003366, "outcome": "passed"}, "call": {"duration": 0.005933083000000006, "outcome": "passed"}, "teardown": {"duration": 8.883299999995486e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[facet.field]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[facet.field]", "facet.field", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 0.00010162499999999408, "outcome": "passed"}, "call": {"duration": 0.002777458999999982, "outcome": "passed"}, "teardown": {"duration": 6.562500000001359e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_parameters_from_spec[sort]", "lineno": 239, "outcome": "passed", "keywords": ["test_wds_parameters_from_spec[sort]", "sort", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 9.204100000004267e-05, "outcome": "passed"}, "call": {"duration": 0.0027559589999999745, "outcome": "passed"}, "teardown": {"duration": 6.891700000000167e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestWdsEndpointFromSpec::test_wds_required_parameters", "lineno": 276, "outcome": "passed", "keywords": ["test_wds_required_parameters", "TestWdsEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 7.550000000000612e-05, "outcome": "passed"}, "call": {"duration": 0.002781040999999984, "outcome": "passed"}, "teardown": {"duration": 5.83749999999994e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestParametersFromSpec::test_format_parameter", "lineno": 323, "outcome": "passed", "keywords": ["test_format_parameter", "TestParametersFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 7.004099999996516e-05, "outcome": "passed"}, "call": {"duration": 0.006240458000000004, "outcome": "passed"}, "teardown": {"duration": 7.304099999999591e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestParametersFromSpec::test_rows_parameter", "lineno": 344, "outcome": "passed", "keywords": ["test_rows_parameter", "TestParametersFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 8.929099999999135e-05, "outcome": "passed"}, "call": {"duration": 0.0064392500000000075, "outcome": "passed"}, "teardown": {"duration": 9.791700000000292e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestParametersFromSpec::test_pagination_parameters", "lineno": 370, "outcome": "passed", "keywords": ["test_pagination_parameters", "TestParametersFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 7.745900000000194e-05, "outcome": "passed"}, "call": {"duration": 0.005506582999999954, "outcome": "passed"}, "teardown": {"duration": 6.333299999999875e-05, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestHealthEndpointFromSpec::test_health_endpoint_if_defined", "lineno": 392, "outcome": "skipped", "keywords": ["test_health_endpoint_if_defined", "TestHealthEndpointFromSpec", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 7.333300000000875e-05, "outcome": "passed"}, "call": {"duration": 0.0007364590000000226, "outcome": "skipped", "longrepr": "('/Users/yoz/localcode/docqueryservice_instrumented/tests/test_openapi_contract.py', 402, 'Skipped: Health endpoint not implemented by external API')"}, "teardown": {"duration": 0.0001494999999999691, "outcome": "passed"}}, {"nodeid": "test_openapi_contract.py::TestSpecSchemaCompliance::test_error_response_schema", "lineno": 420, "outcome": "passed", "keywords": ["test_error_response_schema", "TestSpecSchemaCompliance", "test_openapi_contract.py", "tests", ""], "setup": {"duration": 7.954100000001629e-05, "outcome": "passed"}, "call": {"duration": 0.0009307499999999802, "outcome": "passed"}, "teardown": {"duration": 8.970899999999338e-05, "outcome": "passed"}}], "warnings": [{"message": "urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020", "category": "NotOpenSSLWarning", "when": "collect", "filename": "/Users/yoz/Library/Python/3.9/lib/python/site-packages/urllib3/__init__.py", "lineno": 35}, {"message": "jsonschema.exceptions.RefResolutionError is deprecated as of version 4.18.0. If you wish to catch potential reference resolution errors, directly catch referencing.exceptions.Unresolvable.", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/yoz/Library/Python/3.9/lib/python/site-packages/prance/__init__.py", "lineno": 234}, {"message": "validate_spec shortcut is deprecated. Use validate instead.", "category": "DeprecationWarning", "when": "runtest", "filename": "/Users/yoz/Library/Python/3.9/lib/python/site-packages/openapi_spec_validator/shortcuts.py", "lineno": 66}]}