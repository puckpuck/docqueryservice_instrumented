load_module modules/ngx_otel_module.so;
events {
    worker_connections 1024;
}
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    # Basic nginx settings
    sendfile        on;
    keepalive_timeout  65;
    client_max_body_size 100M;

    upstream frontend {
        # since nginx is running in a container, we need to use the host.docker.internal address to access the frontend service
        server host.docker.internal:3000;
    }

    upstream backend {
        # since nginx is running in a container, we need to use the host.docker.internal address to access the backend service
        server host.docker.internal:5002;
    }

    otel_exporter {
        endpoint "https://api.honeycomb.io";
        header x-honeycomb-team "hcaik_01k5yb1pckatx99zmsa73s5k16fatdxbeg3d5yqebbrgj6p4tkr8655463";
    }
    otel_trace on;
    otel_service_name "web-nginx";
    otel_trace_context propagate;

    server {
        listen 8080;
        listen [::]:8080;
        server_name web-nginx;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Content-Security-Policy "default-src 'self'; connect-src 'self' https://api.honeycomb.io http://localhost:8080 http://localhost:3000 http://localhost:5002 http://localhost:4318; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval';";

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 10240;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript application/json;
        gzip_disable "MSIE [1-6]\.";

        # Proxy settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Frontend proxy with static file handling for development
        location / {
            otel_trace_context inject;
            proxy_pass http://frontend;
            
            # For development with React's WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            # Handle static files by proxying to frontend
            location /static/ {
                proxy_pass http://frontend/static/;
            }
        }

        # Backend API proxy
        location /v1/ {
            otel_trace_context propagate;
            proxy_pass http://backend;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
        }

        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
